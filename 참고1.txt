m2da01-boot/manifest.yml

## front
view onSearch
container onSearch
	-> const { bofMinuteStore } = this.props;
		this.props.bofMinuteStore.findTable(mtlNo);
		this.props.bofMinuteStore.findSearch(mtlNo);
store   @action findTable(mtlNo)
	->  // table 조회
		  @action
		  findTable(mtlNo) {
			return this.repository.findTable(mtlNo)
			  .then((rowData) => this._rowData = rowData);
		  }
repository  repository.findTable(mtlNo) //axios를 사용해서 조회.
	->     // table1 조회
		  findTable(mtlNo) {
			// return axios.get(`/m2db02-bof/bof-minute-result/BofMinuteResultsUI/${mtlNo}`)
			return axios.get(`/m2drq0-readonly/bof/SteelLdRstPerMinuteData/${mtlNo}`)
			  .then(response => BofMinuteModel.findTable(response.data));
		  }
model BofMinuteModel.findTable(response.data)
	-> static findTable(responseData) {

			let mix = {};
			const table1 = [];
			const table2 = [];
			const table3 = [];
			const table4 = [];

			for (let i = 0; i < responseData.length; i++) {
			  table1.push({
				time: i,
				smLdBlwPrgRt: responseData[i].smLdBlwPrgRt,
				........
				smLdAyfeThwAQt10: responseData[i].smLdAyfeThwAQt10,
				  });
			}
				mix = { table1, table2, table3, table4 };
				return mix;
		}

M2DA01RN001 TOPIC

##http://172.18.71.115:8000/ko-KR/app/MES3/app_search_001
devuser01 // devuser01!!

#config셋팅 (*참고 boot스타트시 datasource.uri 관련 error나던 부분도 아래 설정이 안되어 있으면 발생하는듯.. )
-Dspring.profiles.active=local-k
-javaagent:C:\Users\AhnByoungKi\.m2\repository\org\springframework\springloaded\1.2.8.RELEASE\springloaded-1.2.8.RELEASE.jar -noverify
-Duser.timezone=Asia/Seoul -DGCS_COMP_CODE=01 -DLANGUAGE_CODE=KOR

# 최신버전 mybatis사용
SteelLdFceRmatUseTotVO
@RequestMapping(value = "/bof")
-> src/com/posco/mes3/m2drq0/service/rest/BofResource.java	--@GetMapping("/SteelLdFceDpBlwHeader/{operFlag}/{facOpCdN}/{mtlNo}")  --(findSteelLdFceDpBlwHeader)
 -> src/com/posco/mes3/m2drq0/domain/logic/bof/BofLogic.java --(findSteelLdFceDpBlwHeader)
  -> src/com/posco/mes3/m2drq0/store/mybatis/bof/BofMybatisStore.java --(findLdFceRmatUseTot)
   -> m2drq0-boot/src/main/resources/mybatis/mapper/bofMapper.xml 안에 쿼리  --(SteelLdFceRmatUseTotVO)
   
   
/m2db03-service/src/main/java/com/posco/mes3/m2db03/service/rest/AgentEaiReceiverResource.java
/m2db03-service/src/main/java/com/posco/mes3/m2db03/domain/spec/composite/bapResult/BAPResultCompositeService.java
/m2db03-service/src/main/java/com/posco/mes3/m2db03/domain/logic/composite/bapResult/BAPResultCompositeLogic.java
/m2dc01-client/src/main/java/com/posco/mes3/m2dc01/client/ChargeMaterialClient.java
/m2dc01-client/src/main/java/com/posco/mes3/m2dc01/rest/charge/ChargeMaterialResource.java
/m2dc01-client/src/main/java/com/posco/mes3/m2dc01/domain/logic/entity/charge/ChargeMaterialLogic.java
/m2dc01-client/src/main/java/com/posco/mes3/m2dc01/store/jpastore/charge/ChargeMaterialJpaStore.java
## KEA1B014 
m2da01/resources/application-eai.yml
	KEA1B014: #광_1제강_BAP실적
	name: m2db03-bap #제강BAP실적
	path: eai/bapResult
	type: map #ZM2DE014
com.posco.mes3.m2db03.service.rest.AgentEaiReceiverResource.java
	->@RequestMapping(value = "/eai")
	  @PostMapping(value="/bapResult")
	->return this.bapResultCompositeService.receiveMessage(data);
com.posco.mes3.m2db03.domain.spec.composite.bapResult.BAPResultCompositeService.java (interface)
	->receiveMessage
com.posco.mes3.m2db03.domain.logic.composite.bapResult.BAPResultCompositeLogic.java
	->receiveMessage
		-> this.findChargeMaterial(mtlNo); -> m2dc01Proxy.findChargeMaterial(mtlNo);
										   -->com.posco.mes3.m2db03.domain.proxy.M2dc01Proxy.java (interface)
										   -->com.posco.mes3.m2db03.service.bind.m2dc01Delegator.java
											->findChargeMaterial(String mtlNo) ->m2dc01Client.findChargeMaterial(mtlNo)
com.posco.mes3.m2dc01.client.ChargeMaterialClient.java (interface)
	/**
	 * Charge재료 조회
	 *
	 * @param mtlNo
	 * @return ChargeMaterial
	 */
	@GetMapping(value = "/charge-material/{mtlNo}") // Charge재료 조회
	public ChargeMaterial findChargeMaterial(@PathVariable("mtlNo") String mtlNo);
	
com.posco.mes3.m2dc01.rest.charge.ChargeMaterialResource.java
	@RequestMapping(value = "/charge-material")
	/**
	 * 제강재료 데이타를 조회한다.
	 *
	 * @param mtlNo
	 * @return ChargeMaterial
	 */
	@GetMapping("/{mtlNo}")
	public ChargeMaterial find(@PathVariable("mtlNo") String mtlNo) {
		return chargeMaterialService.find(mtlNo);
	}
com.posco.mes3.m2dc01.domain.logic.entity.charge.ChargeMaterialLogic.java
	->return chargeMaterialStore.retrieve(mtlNo);
com.posco.mes3.m2dc01.store.jpastore.charge.ChargeMaterialJpaStore.java	
	/**
	 * 제강재료 재료번호로 데이타를 조회한다.
	 *
	 * @param mtlNo
	 * @return ChargeMaterial
	 */
	@Override
	public ChargeMaterial retrieve(String mtlNo) {
		//
		ChargeMaterialJpo jpo = chargeMaterialRepository.findByMtlNo(mtlNo);
		return jpo != null ? jpo.toDomain() : null;
	}

## get -> localhost:8088/bap-result/bapResults/SQ23599   
com.posco.mes3.m2db03.service.rest.BAPResultResource.java
	-> findByMtlNo2 추가
com.posco.mes3.m2db03.domain.logic.entity.bapResult.BAPResultLogic.java
	-> findByMtlNo2 추가
com.posco.mes3.m2db03.domain.spec.entity.bapResult.BAPResultService.java (interface)
	-> findByMtlNo2 추가(선언)	
com.posco.mes3.m2db03.store.jpaStore.bapResult.BAPResultJpaStore.java
	-> retriveByMtlNo2 추가
com.posco.mes3.m2db03.domain.store.bapResult.BAPResultStore.java (interface)
	-> retriveByMtlNo2 추가(선언)
com.posco.mes3.m2db03.store.repository.bapResult.BAPResultRepository.java
	-> findByMtlNo2 추가 선언 --> jpa findByMtlNo mtl_no조회 2가 붙으면 조회가 안되고 findByOperFlag 이런식으로 항목에 있는걸 조회..
	   그러므로 여기서는 findByMtlNo 있는거 그대로 사용..

**참고)logic
level1 entity) findByMtlNo(String mtlNo) 처럼 단순 조회등 이런것들
	-> ex) com.posco.mes3.m2db01.domain.logic.entity.IronPreparationResultLogic.java
level2 aggregate) A,B service 들을 가져와서 조회등.. 조금 복잡한것들..
	-> ex) com.posco.mes3.m2db01.domain.logic.aggregate.TlcIronComponentAnalysisAggregateLogic.java
level3 composite) A,B,C.. 등 여러 service 등을 가져와서 지지고 볶고 하는것들..
	-> ex) com.posco.mes3.m2db01.domain.logic.composite.IronPreparationResultCompositeLogic.java
Spring) 이건.. ChargeDuplicateSpringLogic app 로그에서 보면 여기서 실행되는 로그가 나오고 실제 소스에서는 보통 ChargeDuplicateLogic 이런식으로 naming rule로 되어있는듯.
	-> ex) com.posco.mes3.m2dc01.logic.ChargeDuplicateSpringLogic.java
	-> ex) com.posco.mes3.m2dc01.domain.logic.entity.charge.ChargeDuplicateLogic.java
	
**참고)FeignClient
서비스간에 api를 호출하여 사용(서비스마다 가지는 db도 틀리고 영역이 있음.)



react,css3,html5,spring5,jpa,
Spring Zuul(API Gateway),Netflix Eureka(Service Discovery),Spring Ribbon(Service Routing),Kibana(Logging & Monitoring),Kafka(Message Queue),Pivotal PCF
API SWAGGER(API 명세)


#Table 코드 체계
 ○ TB _ XXXXXX _ R_ccccccddd  (최대 25자, 사유: 이력추적 Table 및 View, Index 최대 길이 고려)
   ①      ②      ③   ④    ⑤
   ① : 고정(2자리)
   ② : Microservice ID (6) ※ Domain 영역에 따른 주제 영역, 용도 정의 중복 최소화
   ③ : 주제영역(1)
        ※ 8개 영역 - 자원/R, 사양/S, 계획/P, 지시/D, 진행/E, 실적/C, 추적/T, 분석/A
   ④ ⑤ : 용도 정의 (Variable) - 업무 용도 맞게 영문 약어와 순번(Optional)의 조합으로 정의(최대 13자리)
       예) TB_M2AA01_C_PANA010 (제선조업 실적관리 Table)
          TB_N1BA01_E_JUMUN010 (제압관제 주문정보 Table)

※ 추가사항
 1. MES 2.0 Table 중 PN_ (Plan) 관련 테이블은 Table 코드체계(TB_)를 따름.
 2. History Table은 마지막에 ‘_H’를 붙임. 예) TB_M2AA01_A_PANA_010_H
 3. 용도 정의는 표준용어사전에 있는 이름 준수


#boot start 시 error
error 내용: Could not locate PropertySource and the fail fast property is set, failing
1)open configurations Arguments VM 설정
-Dspring.profiles.active=local-k
-javaagent:C:\Users\AhnByoungKi\.m2\repository\org\springframework\springloaded\1.2.8.RELEASE\springloaded-1.2.8.RELEASE.jar -noverify
-Duser.timezone=Asia/Seoul -DGCS_COMP_CODE=01 -DLANGUAGE_CODE=KOR

2)인증서 설치
2-1)https://login.sys.dpmes.posco.co.kr/login 화면에서 인증서 보기>자세히>파일에복사
2-2)다운받은 인증서를 C:\Program Files\Java\jdk1.8.0_251\jre\lib\security 위치에 복사
2-3)cmd C:\Program Files\Java\jdk1.8.0_251\jre\lib\security 위치로 가서 아래 명령어 실행
--> keytool -import -keystore cacerts -storepass changeit -alias pcfdemop -file posco_p.cer


#N-UI EAI
ERP,SCM,P/C -> EAI-Server -> EAI-Adapter -> Agent -> m2da01 agent/resources/application-eai.yml

EAI-Adapter 에서 String->JSON, JSON->String Format변환

->path부분 m2db04-lf eai/lfResult api호출 해서 로직처리
시작 agent
pc에서 올라오는것과 kafka(타체인)에서 올라오는 경우, 보내고,받고 경우.

com.posco.mes3.m2db02.rest.AgentEaiReceiverResource.java

**master
BRMS, Masterdata 연계 →  컴포넌트 목록 으로 검색.

** 어노테이션)
@SpringBootApplication 어노테이션은 아래와 같이 세 가지 특징을 제공해줍니다.
 - @EnableAutoConfiguration : Spring Boot의 자동화 기능(Spring 설정)을 활성화시켜줍니다.
 - @ComponentScan : 패키지내 application 컴포넌트가 어디에 위치해있는지 검사합니다. (빈 검색)
 - @Configuration : 빈에 대해서 Context에 추가하거나 특정 클래스를 참조해올 수 있습니다.
@EnableDiscoveryClient : Eureka가 서비스를 탐색할 때 사용한다.
@EnableFeignClients
 

**소스)
client에 아래와 같이 @GetMapping("bof-dephosphorization-result/BofDephosphorizationResult/{transactionId}") 부분들은 
rest 방식으로 주소를 넘겨서 찾는? BofDephosphorizationResult/{transactionId} 이걸로 찾거나 아니면 rest쪽을 찾아보면 됨.
/**
 * 전로탈린실적 의 데이타를 조회한다.
 * @param transactionId
 * @param stepNum
 */
@GetMapping("bof-dephosphorization-result/BofDephosphorizationResult/{transactionId}")//전로탈린실적
public BofDephosphorizationResult  findBofDephosphorizationResultById(@PathVariable("transactionId") BigDecimal transactionId);

BofDephosphorizationResult/{transactionId}
쿼리 위치 : C:/MES3/m2db08/m2db08-boot/src/main/resources/query


##logic부분에는 aggregate,composite,entity 이렇게 ?
aggregate : ??
composite : 예를들어 a,b,c 테이블을 조회하여 처리해하는 로직이 있다고 하면 composite여기서 로직구현하도록..? 그래서 composite에서는 다른 service에서 호출하여 사용한다?
entity : 단순 저장할때..? DB 컬럼을 set get dto와 연결.

#config-repo (application-eai.yml,application-event-consumer.yml,application-event-producer.yml)
-(EAI서버)application-eai.yml P/C or 타서비스에서 받는 TC들 EAI 서버를 통해서 제강으로 들어오는 TC들..(ex)KEA1A005
	C:\workspace\git\m2da01-agent\m2da01-boot\src\main\resources\application-eai.yml
-(kafka서버)application-event-consumer.yml 가져다 사용하는..의미로.. kafka서버를 통해서 제강으로 들어오는 event들..(ex)KEZ1A281
	C:\workspace\git\m2da01-agent\m2da01-boot\src\main\resources\application-event-consumer.yml
-(kafka서버)application-event-producer.yml 타시스템이나,타체인으로 제강이 kafka서버를 통해서 송신하는 event들.. (ex)#charge생산실적전송 H6C46H01: #본사_진행관리_광)열연Charge조업실적 topic: M0AB12RY001
	C:\workspace\git\m2da01-agent\m2da01-boot\src\main\resources\application-event-producer.yml
**참고) kafka에서는 송신시에 topic 을 지정해줘야 하고 topic id는 따로 신청을 하여 발급 받아야 한다..




ex)LF실적 KEA1B016
## application-eai.yml
#제강LF실적
KEA1B016: #광_1제강_LF실적
name: m2db04-lf #제강LF실적
path: eai/lfResult
type: map #ZM2DE016

##rest /m2db04/m2db04-service/src/main/java/com/posco/mes3/m2db04/service/rest/AgentEaiReceiverResource.java
-->lfResult 매핑? receiveMessage
##spec /m2db04/m2db04-domain/src/main/java/com/posco/mes3/m2db04/domain/spec/composite/lfResult/LFResultCompositeService.java
--> receiveMessage
##logic /m2db04/m2db04-domain/src/main/java/com/posco/mes3/m2db04/domain/logic/composite/lfResult/LFResultCompositeLogic.java
--> receiveMessage
	---> m2dc01Proxy.findChargeMaterial(mtlNo)
		/m2db04-domain/src/main/java/com/posco/mes3/m2db04/domain/proxy/M2dc01Proxy.java
		/m2db04-service/src/main/java/com/posco/mes3/m2db04/service/bind/m2dc01Delegator.java
	---> m2dc01Client.findChargeMaterial(mtlNo)
		/m2dc01-client/src/main/java/com/posco/mes3/m2dc01/client/ChargeMaterialClient.java
	---> /charge-material/{mtlNo} 이곳으로 간다(rest.charge쪽)
		/m2dc01-service/src/main/java/com/posco/mes3/m2dc01/rest/charge/ChargeMaterialResource.java
	---> @GetMapping("/{mtlNo}") chargeMaterialService.find(mtlNo);
		/m2dc01-domain/src/main/java/com/posco/mes3/m2dc01/domain/logic/entity/charge/ChargeMaterialLogic.java
	---> chargeMaterialStore.retrieve(mtlNo);
		/m2dc01-store/src/main/java/com/posco/mes3/m2dc01/store/jpastore/charge/ChargeMaterialJpaStore.java
		@Override
		public ChargeMaterial retrieve(String mtlNo) {
			//
			ChargeMaterialJpo jpo = chargeMaterialRepository.findByMtlNo(mtlNo);
			return jpo != null ? jpo.toDomain() : null;
		}
		**참고) findByMtlNo(mtlNo) -----> Repository에서 findBy 이하 MtlNo를 where절로 괄호안에 mtl_no를 param으로 해서 쿼리를 만들어준다.
		method    | 기능
		save() 	  | 레코드 저장 (insert, update)
		findOne() | primary key로 레코드 한건 찾기
		findAll() | 전체 레코드 불러오기. 정렬(sort), 페이징(pageable) 가능
		count()	  | 레코드 갯수
		delete()  | 레코드 삭제
		findBy로 시작   | 쿼리를 요청하는 메서드 임을 알림
		countBy로 시작  | 쿼리 결과 레코드 수를 요청하는 메서드 임을 알림

		
Query 메소드에 포함할 수 있는 키워드는 다음과 같다.

메서드 이름 키워드 | 샘플 | 설명
And  |  findByEmailAndUserId(String email, String userId)  |  여러필드를 and 로 검색
Or | findByEmailOrUserId(String email, String userId) | 여러필드를 or 로 검색
Between | findByCreatedAtBetween(Date fromDate, Date toDate) | 필드의 두 값 사이에 있는 항목 검색
LessThan | findByAgeGraterThanEqual(int age) | 작은 항목 검색
GreaterThanEqual | findByAgeGraterThanEqual(int age) | 크거나 같은 항목 검색
Like | findByNameLike(String name) | like 검색
IsNull | findByJobIsNull() | null 인 항목 검색
In | findByJob(String … jobs) | 여러 값중에 하나인 항목 검색
OrderBy | findByEmailOrderByNameAsc(String email) | 검색 결과를 정렬하여 전달
jpa래퍼런스 주소: http://docs.spring.io/spring-data/jpa/docs/1.10.1.RELEASE/reference/html/#jpa.sample-app.finders.strategies


Pulling 1 repository
Checkout conflict with files: 
m2db08-boot/manifest.yml
m2db08-service/pom.xml
Checkout conflict with files: 
m2db08-boot/manifest.yml
m2db08-service/pom.xml

config/devServer.properties.js

#포털 주소
http://dirms.posco.co.kr:7090/devportal.html
#가이드 주소(pd911001/pd911001)
http://guidesite.mes3.posco.co.kr:8080/xwiki/bin/view/Main/

###############################################
1)java 1.8 설치 -> JAVA_HOME,PATH 설정
2)maven 설치(압축해제) -> MAVEN_HOME,PATH 설정
3)STS 설치(압축해제)
Spring boot project 생성시 에러 : SunCertPathBuilderException: unable to find valid certification path to requested target
아래 내용 확인
인증서
https://gist.githubusercontent.com/lesstif/cd26f57b7cfd2cd55241b20e05b5cd93/raw/InstallCert.java
java -cp . InstallCert start.spring.io
keytool -exportcert -keystore jssecacerts -storepass changeit -file output.cert -alias start.spring.io-1
keytool -import -file "./output.cert" -alias letsencrypt -keystore "C:/Program Files/Java/jdk1.8.0_251/jre/lib/security/cacerts" -storepass changeit

==>
SunCertPathBuilderException: unable to find valid certification path to requested target 오류 발생 시 대처
1) 인증서 내보내기 : IE 실행 – 도구 – 인터넷 옵션 – 내용 – 인증서 – 신뢰할수 있는 루트 인증기관 – POSCO 선택 – 내보내기 – 경로 지정(D:\POSCO_CA.cer) - 닫기
2) Java 인증서 복사: 내려받은 인증서를 Java Security 디렉토리로 복사 D:\Java8\jre\lib\security
3) 인증서 추가를 위하여 Java Security 디렉토리에서 명령어 실행
	D:\Java8\jre\lib\security>keytool -import -keystore  cacerts -storepass changeit -file POSCO_CA.cer -alias POSCO
4)lombok 설치
5)git설치
6)pcf CommandLineTool 체인id가 없어서 미설치
7)oracle client 12C 32bit 설치(런타임)
8)insomnia 설치 (32bit는 postman 사용)
9)archetype 설치 C:\Users\AhnByoungKi\.m2\repository\archetype-catalog.xml 파일 확인.
  ->프로젝트 신규로 생성할때 사용하는것 같은데 지금은 소스 받아서 하는거라.. 별로..
10) 제작	VOD 부분은 문서로 되어있어서 따로 권한을 받던가 문서를 받던가..해야할듯..
11)Swagger - 문서화? api 설치는 없이 설정?pom.xml?

workspace
#bootstrap.yml -> 설정파일(서버가 올라갈때 설정 읽는?)
#BitBucket
1 pd911001/pd911001!@   /_3$Oracle
2 pd992111 pd992111
###############################################
http://guidesite.mes3.posco.co.kr:8080/xwiki/bin/view/3.%EA%B0%9C%EB%B0%9C%ED%91%9C%EC%A4%80/3.7.%20%EA%B0%9C%EB%B0%9C%EC%A0%88%EC%B0%A8/
http://mes-ui-react.apps.dpmes.posco.co.kr/common/mes-ui-react/examples/getting-started/coding-convention
http://guidesite.mes3.posco.co.kr:8080/xwiki/bin/view/4.%EA%B5%90%EC%9C%A1%EC%9E%90%EB%A3%8C/4.2.%EC%A0%9C%EC%9E%91%20%28%EB%B6%80%ED%8A%B8%EC%BA%A0%ED%94%84%29/4.2.3.Java/4.2.3.1.Maven/
http://guidesite.mes3.posco.co.kr:8080/xwiki/bin/view/6.%EC%A0%9C%EC%9E%91%EA%B0%80%EC%9D%B4%EB%93%9C/6.3.%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EA%B5%AC%EC%A1%B0%20%EB%B0%8F%20%EA%B0%9C%EB%B0%9C%20%EC%88%9C%EC%84%9C%20%EA%B0%80%EC%9D%B4%EB%93%9C%28v0.1%29


https://offbyone.tistory.com/391

****소스받기)
Git Repositories 
->Clone a Git Repository
-> 설정,위치(C:\workspace\git)..
-->Git Repositories/선택 -> 우클릭 -> import Maven project 
   **잘못된방법?)->package Explorer,import -> Git -> Projects from Git -> Existing local repository -> 선택 -> import as general project <==이렇게하면 boot dashboard 연결이 안됨..

**대표적인 최종 연산 메소드)
스트림 API에서 사용할 수 있는 대표적인 최종 연산을 위한 메소드는 다음과 같습니다.
void forEach(Consumer<? super T> action) 스트림의 각 요소에 대해 해당 요소를 소모하여 명시된 동작을 수행함.
Optional<T> reduce(BinaryOperator<T> accumulator) 처음 두 요소를 가지고 연산을 수행한 뒤, 그 결과와 다음 요소를 가지고 또다시 연산을 수행함.
T reduce(T identity, BinaryOperator<T> accumulator) 이런 식으로 해당 스트림의 모든 요소를 소모하여 연산을 수행하고, 그 결과를 반환함.
Optional<T> findFirst() 해당 스트림에서 첫 번째 요소를 참조하는 Optional 객체를 반환함.
Optional<T> findAny()	(findAny() 메소드는 병렬 스트림일 때 사용함)
boolean anyMatch(Predicate<? super T> predicate) 해당 스트림의 일부 요소가 특정 조건을 만족할 경우에 true를 반환함.
boolean allMatch(Predicate<? super T> predicate) 해당 스트림의 모든 요소가 특정 조건을 만족할 경우에 true를 반환함.
boolean noneMatch(Predicate<? super T> predicate) 해당 스트림의 모든 요소가 특정 조건을 만족하지 않을 경우에 true를 반환함.
long count() 해당 스트림의 요소의 개수를 반환함.
Optional<T> max(Comparator<? super T> comparator) 해당 스트림의 요소 중에서 가장 큰 값을 가지는 요소를 참조하는 Optional 객체를 반환함.
Optional<T> min(Comparator<? super T> comparator) 해당 스트림의 요소 중에서 가장 작은 값을 가지는 요소를 참조하는 Optional 객체를 반환함.
T sum() 해당 스트림의 모든 요소에 대해 합을 구하여 반환함.
Optional<T> average()	해당 스트림의 모든 요소에 대해 평균값을 구하여 반환함.
<R,A> R collect(Collector<? super T,A,R> collector)	인수로 전달되는 Collectors 객체에 구현된 방법대로 스트림의 요소를 수집함.

**ArcheType)
url : http://git.posco.co.kr/projects/MES3/repos/glue-library/browse/v1.1-SNAPSHOT/MavenArchetype0.0.7
git bash 실행
다운받을 폴더 이동 cd C:\bkwork\git
git clone (git에서 clone 복사한 주소 입력) http://git.posco.co.kr/scm/mes3/glue-library.git
id/pw입력
C:\bkwork\git\glue-library 확인.
archetype.bat 실행
	archetype.bat파일을 실행하면 base-archetpye.jar파일과 cqrs-archetype.jar파일을 local repository에 설치한 후 설치한 파일들을 archetype-catalog.xml에 등록하는 작업 수행.
%USER_HOME%\.m2\ repository 에 archetype-catalog.xml 생성 확인	--> C:\Users\AhnByoungKi\.m2\repository\archetype-catalog.xml 확인.
Step3. Eclipse에서 Local Catalog추가하기
[1] Eclipse -> Window -> preferences -> Maven-> Archetypes
[2] Add local Catalog클릭 -> archetype-catalog.xml파일 경로 등록
[3] Description : local
[4] OK클릭
Step4. archetype으로 프로젝트 생성하기
[1] Eclipse -> File -> Project -> new Project를 클릭.
[2] Maven Project를 선택하고 Next클릭.
[3] Create a simple project 체크박스를 해제한 후 Next클릭.
[4] base타입과 cqrs타입중 원하는 프로젝트 유형을 선택한 후 Next클릭

entity->spec->store->event(logic)->
**구조)
-boot(고정)
	서비스의 구동을 위한 Spring-Boot wrapping
	Config Server 연동
	Service Discovery 연동
	zuul api-gateway 연동
	swagger portal 연동
	배포 환경에 따를 Profile 관리
	boot jar로 com.poscoict.base.posco-boot-jar 를 parent로 합니다.
	기본적으로 필요한 BaseClass들의 dependency는
	com.posco.mes3.MicroserviceID-service
	com.posco.mes3.MicroserviceID-store
	org.springframework.cloud.spring-cloud-starter-config
	org.springframework.cloud.spring-cloud-starter-netflix-eureka-client
-client(고정)
-domain(고정)
	POJO, 기술 종속적인 요소는 포함 되지 않습니다.
	관련 프로젝트(-service, -store)의 중심 및 기준이 되는 내용을 포함 합니다.
	Component jar로 com.poscoict.base.posco-comp-jar 를 parent로 합니다.
	기본적으로 필요한 BaseClass들의 dependency는
	com.poscoict.base.share.share-domain
	com.poscoict.base.share.share-event
-service(고정)
-store(고정)->현재 서비스의 Persistent관련 구현체 입니다.






**참고)
<dependency>
	<groupId>com.posco.mes3.reuse</groupId>
	<artifactId>posco-mes3-collections</artifactId>
	<version>0.0.1</version>
</dependency>
<!-- userInfo -->
<dependency>
	<groupId>com.posco.mes3.reuse</groupId>
	<artifactId>ma2a01-security-client</artifactId>
	<version>2.0.0-SNAPSHOT</version>
</dependency>
